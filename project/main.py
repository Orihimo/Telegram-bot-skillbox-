import json

import telebot
from telebot import types
from telebot.types import InputMediaPhoto
from telebot import custom_filters
from telebot.handler_backends import State, StatesGroup
from telebot.types import Message
from telebot.storage import StateMemoryStorage

from datetime import datetime
from location import get_location_id
from list_lowprice import get_list_hotels_lowprice
from list_highprice import get_list_hotels_highprice
from list_bestdeal import get_list_hotels_bestdeal
from hotel import get_hotel_info

from peewee import *
import loguru
import time

# Now, you can pass storage to bot.
state_storage = StateMemoryStorage()

bot = telebot.TeleBot('6254243703:AAEeo_03r_UI76iSDqsOZPnGweefMmZ1Lq8', state_storage=state_storage)

db = SqliteDatabase('history.db')


# States group.
class MyStates(StatesGroup):
    city = State()  # creating instances of State class is enough from now
    city_count = State()
    photo = State()
    date_in = State()
    date_out = State()
    min_price = State()
    max_price = State()
    min_dist = State()
    max_dist = State()


class History(Model):
    user_id = IntegerField()
    username = CharField()
    command = CharField()
    city = CharField()
    city_count = IntegerField()
    photo = IntegerField()
    date_in = CharField()
    date_out = CharField()
    min_price = IntegerField(default=0)
    max_price = IntegerField(default=0)
    min_dist = IntegerField(default=0)
    max_dist = IntegerField(default=0)
    hotels = TextField()
    timestamp = DateTimeField(default=datetime.now)

    class Meta:
        database = db


db.create_tables([History])
loguru.logger.add("errors.log", level="CRITICAL")


@bot.message_handler(state="*", commands=['cancel'])
def any_state(message: Message):
    """
    Cancel state
    """
    bot.send_message(message.chat.id, "Your state was cancelled.")
    bot.delete_state(message.from_user.id, message.chat.id)


@bot.message_handler(commands=['start'])
def start_command(message):
    keyboard = types.InlineKeyboardMarkup()
    help_button = types.InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data='help')
    lowprice_button = types.InlineKeyboardButton("üí∞ –°–∞–º—ã–µ –¥–µ—à–µ–≤—ã–µ –æ—Ç–µ–ª–∏", callback_data='lowprice')
    highprice_button = types.InlineKeyboardButton("üí∏ –°–∞–º—ã–µ –¥–æ—Ä–æ–≥–∏–µ –æ—Ç–µ–ª–∏", callback_data='highprice')
    bestdeal_button = types.InlineKeyboardButton("üåü –õ—É—á—à–∏–µ –æ—Ç–µ–ª–∏ –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º", callback_data='bestdeal')
    history_button = types.InlineKeyboardButton("üìö –ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤", callback_data='history')
    keyboard.add(help_button, lowprice_button, highprice_button, bestdeal_button, history_button)

    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç, —á–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?", reply_markup=keyboard)


@bot.callback_query_handler(func=lambda call: True)
def button_callback(call):
    if call.data == 'help':
        help_command(call.message)
    elif call.data == 'lowprice':
        lowprice(call.message)
    elif call.data == "highprice":
        highprice(call.message)
    elif call.data == "bestdeal":
        bestdeal(call.message)
    elif call.data == 'history':
        history(call.message)


@bot.message_handler(commands=['history'])
def history(message: Message):
    """
    –ü—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∫–æ–º–∞–Ω–¥—ã history, –º—ã –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∏ –≤—Ä–µ–º–µ–Ω–µ–º
    """
    try:
        bot.send_message(message.chat.id, "–ü–æ–∫–∞–∑—ã–≤–∞—é –∏—Å—Ç–æ—Ä–∏—é –∑–∞–ø—Ä–æ—Å–æ–≤")

        found_history = False

        for hist in History.select().order_by(History.id.desc()):
            if hist.user_id == message.chat.id:
                found_history = True

                formatted_timestamp = hist.timestamp.strftime('%Y-%m-%d %H:%M:%S')
                mess = (
                    f'–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {hist.username}\n'
                    f'–ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞: {hist.city}\n'
                    f'–ö–æ–ª-–≤–æ –æ—Ç–µ–ª–µ–π –¥–ª—è –ø–æ–∫–∞–∑–∞: {hist.city_count}\n'
                    f'–ö–æ–ª-–≤–æ —Ñ–æ—Ç–æ –¥–ª—è –ø–æ–∫–∞–∑–∞ {hist.photo}\n'
                    f'–î–∞—Ç–∞ –∑–∞–µ–∑–¥–∞: {hist.date_in}\n'
                    f'–î–∞—Ç–∞ –æ—Ç—ä–µ–∑–¥–∞: {hist.date_out}\n'
                    f'–í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: {formatted_timestamp}\n'
                )

                hotels_data = json.loads(hist.hotels)

                bot.send_message(message.chat.id, mess)

                for hotel in hotels_data:
                    hotel_mess = (
                        f'–ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ç–µ–ª—è: {hotel["name"]}\n'
                        f'–ê–¥—Ä–µ—Å –æ—Ç–µ–ª—è: {hotel["address"]}\n'
                        f'–†–∞—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ü–µ–Ω—Ç—Ä–∞: {hotel["distance"]}\n'
                        f'–¶–µ–Ω–∞ –∑–∞ –Ω–æ—á—å: {hotel["price_per_day"]}\n'
                        f'–¶–µ–Ω–∞ –∑–∞ –≤–µ—Å—å —Å—Ä–æ–∫ –ø—Ä–µ–±—ã–≤–∞–Ω–∏—è: {hotel["total_price"]}\n'
                    )

                    if 'photos' in hotel and hotel['photos']:
                        media_group = []
                        for num, photo_url in enumerate(hotel['photos']):
                            media_group.append(InputMediaPhoto(media=photo_url, caption=hotel_mess if num == 0 else None))
                        bot.send_media_group(chat_id=message.chat.id, media=media_group)
                    else:
                        bot.send_message(message.chat.id, hotel_mess)
                    time.sleep(1)

        if not found_history:
            bot.send_message(message.chat.id, "–£ –≤–∞—Å –µ—â–µ –Ω–µ –±—ã–ª–æ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤")

        bot.send_message(message.chat.id, "–ö–æ–º–∞–Ω–¥–∞ history –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    except Exception as e:
        loguru.logger.critical(f'–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ history: {str(e)}')

@bot.message_handler(commands=['help'])
def help_command(message: Message):
    """
    –ü—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∫–æ–º–∞–Ω–¥—ã help. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    try:
        help_message = "–í–æ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n\n" \
                       "/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n" \
                       "/lowprice - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å–∞–º—ã—Ö –¥–µ—à–µ–≤—ã—Ö –æ—Ç–µ–ª–µ–π\n" \
                       "/highprice - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å–∞–º—ã—Ö –¥–æ—Ä–æ–≥–∏—Ö –æ—Ç–µ–ª–µ–π\n" \
                       "/bestdeal - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –æ—Ç–µ–ª–µ–π –ø–æ –∑–∞–¥–∞–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º\n" \
                       "/history - –ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤"

        bot.send_message(message.chat.id, help_message)
    except Exception as e:
        loguru.logger.critical(f'–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ help: {str(e)}')

@bot.message_handler(commands=['lowprice'])
def lowprice(message: Message):
    """
    –ü—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∫–æ–º–∞–Ω–¥—ã lowprice, –º—ã –ø—Ä–∏—Å–≤–∞–µ–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—é —Å—Ç–∞—Ç—É—Å city, –∞ —Ç–∞–∫ –∂–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞
    —Å –∫–æ—Ç–æ—Ä—ã–º —Ä–∞–±–æ—Ç–∞–µ–º –≤ —Å–ª–µ–¥—É—é—â–µ–π —Ñ—É–Ω–∫—Ü–∏–∏
    """
    try:
        bot.set_state(message.chat.id, MyStates.city, message.chat.id)
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞')
        with bot.retrieve_data(message.chat.id, message.chat.id) as data:
            data['command'] = 'lowprice'
            data['username'] = message.chat.first_name
    except Exception as e:
        loguru.logger.critical(f'–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ lowprice: {str(e)}')


@bot.message_handler(commands=['highprice'])
def highprice(message: Message):
    """
    –ü—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∫–æ–º–∞–Ω–¥—ã highprice, –º—ã –ø—Ä–∏—Å–≤–∞–µ–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—é —Å—Ç–∞—Ç—É—Å city, –∞ —Ç–∞–∫ –∂–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞
    —Å –∫–æ—Ç–æ—Ä—ã–º —Ä–∞–±–æ—Ç–∞–µ–º –≤ —Å–ª–µ–¥—É—é—â–µ–π —Ñ—É–Ω–∫—Ü–∏–∏
    """
    try:
        bot.set_state(message.chat.id, MyStates.city, message.chat.id)
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞')
        with bot.retrieve_data(message.chat.id, message.chat.id) as data:
            data['command'] = 'highprice'
            data['username'] = message.chat.first_name
    except Exception as e:
        loguru.logger.critical(f'–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ highprice: {str(e)}')

@bot.message_handler(commands=['bestdeal'])
def bestdeal(message: Message):
    """
    –ü—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∫–æ–º–∞–Ω–¥—ã bestdeal, –º—ã –ø—Ä–∏—Å–≤–∞–µ–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—é —Å—Ç–∞—Ç—É—Å city, –∞ —Ç–∞–∫ –∂–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞
    —Å –∫–æ—Ç–æ—Ä—ã–º —Ä–∞–±–æ—Ç–∞–µ–º –≤ —Å–ª–µ–¥—É—é—â–µ–π —Ñ—É–Ω–∫—Ü–∏–∏
    """
    try:
        bot.set_state(message.chat.id, MyStates.city, message.chat.id)
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞')
        with bot.retrieve_data(message.chat.id, message.chat.id) as data:
            data['command'] = 'bestdeal'
            data['username'] = message.chat.first_name
    except Exception as e:
        loguru.logger.critical(f'–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ bestdeal: {str(e)}')


@bot.message_handler(state=MyStates.city)
def get_city(message: Message):
    """
    –§—É–Ω–∫—Ü–∏—é –ø–µ—Ä–µ—Ö–≤–∞—Ç—á–∏–∫, –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞
    –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –µ–≥–æ –≤ —Å–ª–æ–≤–∞—Ä—å data
    """
    try:
        city_name = message.text
        bot.send_message(message.chat.id, f'–í—ã –≤–≤–µ–ª–∏ –≥–æ—Ä–æ–¥: {city_name}')

        with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
            data['city'] = city_name

        bot.set_state(message.from_user.id, MyStates.city_count, message.chat.id)
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º—ã—Ö –æ—Ç–µ–ª–µ–π')
    except Exception as e:
        loguru.logger.critical(f'–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ get_city: {str(e)}')


@bot.message_handler(state=MyStates.city_count, is_digit=True)
def get_city_count(message: Message):
    """
    –í —Ñ—É–Ω–∫—Ü–∏–∏ –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–µ–ª–µ–π –¥–ª—è –ø–æ–∫–∞–∑–∞
    –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –µ–≥–æ –≤ —Å–ª–æ–≤–∞—Ä—å data
    """
    try:
        city_count = message.text
        bot.send_message(message.chat.id, f'–í—ã –≤–≤–µ–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {city_count}')

        with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
            data['city_count'] = city_count

        bot.set_state(message.from_user.id, MyStates.photo, message.chat.id)
        bot.send_message(message.chat.id, '–ù—É–∂–Ω—ã –ª–∏ –≤–∞–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏?\n –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 6 (0 - –Ω–µ–Ω—É–∂–Ω—ã)')
    except Exception as e:
        loguru.logger.critical(f'–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ get_city_count: {str(e)}')


@bot.message_handler(state=MyStates.photo, is_digit=True)
def get_photo_count(message: Message):
    """
    –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–ª-–≤–æ —Ñ–æ—Ç–æ
    –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –∏—Ö –≤ —Å–ª–æ–≤–∞—Ä—å data
    """
    try:
        photo = message.text
        bot.send_message(message.chat.id, f'–í—ã –≤–≤–µ–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ: {photo}')

        with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
            data['photo'] = photo

        bot.set_state(message.from_user.id, MyStates.date_in, message.chat.id)
        bot.send_message(message.chat.id, '–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –≤—ä–µ–∑–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:')
    except Exception as e:
        loguru.logger.critical(f'–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ get_photo_count: {str(e)}')


@bot.message_handler(state=MyStates.date_in)
def get_date_in(message: Message):
    """
    –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –¥–∞—Ç—É –≤—ä–µ–∑–¥–∞, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –µ–µ
    –∏ –¥–µ–ª–∞–µ—Ç –¥–≤–µ –∑–∞–ø–∏—Å–∏ –≤ —Å–ª–æ–≤–∞—Ä—å. –î–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞–∑–Ω–∏—Ü—ã –¥–Ω–µ–π –∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ—Ç–µ–ª–µ–π –ø–æ –¥–∞—Ç–µ
    """
    try:
        date_in = message.text
        bot.send_message(message.chat.id, f'–í—ã –≤–≤–µ–ª–∏ –¥–∞—Ç—É –≤—ä–µ–∑–¥–∞: {date_in}')

        checkInDate = {'day': None, 'month': None, 'year': None}
        checkin_datetime = datetime.strptime(date_in, '%d.%m.%Y')
        checkInDate['day'] = checkin_datetime.day
        checkInDate['month'] = checkin_datetime.month
        checkInDate['year'] = checkin_datetime.year

        with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
            data['date_in'] = checkInDate
            data['start'] = checkin_datetime

        bot.set_state(message.from_user.id, MyStates.date_out, message.chat.id)
        bot.send_message(message.chat.id, '–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –≤—ã–µ–∑–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:')
    except Exception as e:
        loguru.logger.critical(f'–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ get_date_in: {str(e)}')


@bot.message_handler(state=MyStates.date_out)
def get_date_out(message: Message):
    """
    –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –¥–∞—Ç—É –≤—ã–µ–∑–¥–∞
    –∏ –¥–µ–ª–∞–µ—Ç —Ç—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ —Å–ª–æ–≤–∞—Ä—å. –î–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞–∑–Ω–∏—Ü—ã –¥–Ω–µ–π –∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ—Ç–µ–ª–µ–π –ø–æ –¥–∞—Ç–µ, –∏ –∫–æ–ª-–≤–æ –¥–Ω–µ–π –ø—Ä–µ–±—ã–≤–∞–Ω–∏—è
    """
    try:
        date_out = message.text
        bot.send_message(message.chat.id, f'–í—ã –≤–≤–µ–ª–∏ –¥–∞—Ç—É –≤—ä–µ–∑–¥–∞: {date_out}')

        checkOutDate = {'day': None, 'month': None, 'year': None}
        checkout_datetime = datetime.strptime(date_out, '%d.%m.%Y')
        checkOutDate['day'] = checkout_datetime.day
        checkOutDate['month'] = checkout_datetime.month
        checkOutDate['year'] = checkout_datetime.year

        with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
            data['date_out'] = checkOutDate
            data['finish'] = checkout_datetime
            data['days'] = (data['finish'].date() - data['start'].date()).days

            command = data['command']

        msg = f'–ì–æ—Ä–æ–¥ - {data.get("city")}\n' \
              f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–µ–ª–µ–π - {data.get("city_count")}\n' \
              f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ - {data.get("photo")}\n' \
              f'–î–∞—Ç–∞ –∑–∞–µ–∑–¥–∞ - {data.get("date_in").get("day")}.{data.get("date_in").get("month")}.{data.get("date_in").get("year")}\n' \
              f'–î–∞—Ç–∞ –≤—ã–µ–∑–¥–∞ - {data.get("date_out").get("day")}.{data.get("date_out").get("month")}.{data.get("date_out").get("year")}'

        if command == 'lowprice':
            bot.send_message(message.chat.id, f'–ò–¥—ë—Ç –ø–æ–∏—Å–∫:\n{msg}')
            get_result_lowprice(message)

        elif command == 'highprice':
            bot.send_message(message.chat.id, f'–ò–¥—ë—Ç –ø–æ–∏—Å–∫:\n{msg}')
            get_result_highprice(message)

        elif command == 'bestdeal':
            bot.set_state(message.from_user.id, MyStates.min_price, message.chat.id)
            bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –≤ $:')
    except Exception as e:
        loguru.logger.critical(f'–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ get_date_out: {str(e)}')


@bot.message_handler(state=MyStates.min_price, is_digit=True)
def get_min_price(message: Message):
    try:
        min_price = message.text
        bot.send_message(message.chat.id, f'–í—ã –≤–≤–µ–ª–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É: {min_price}')

        with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
            data['min_price'] = min_price

        bot.set_state(message.from_user.id, MyStates.max_price, message.chat.id)
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –≤ $:')
    except Exception as e:
        loguru.logger.critical(f'–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ get_min_price: {str(e)}')


@bot.message_handler(state=MyStates.max_price, is_digit=True)
def get_max_price(message: Message):
    try:
        max_price = message.text
        bot.send_message(message.chat.id, f'–í—ã –≤–≤–µ–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É: {max_price}')

        with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
            data['max_price'] = max_price

        bot.set_state(message.from_user.id, MyStates.min_dist, message.chat.id)
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ü–µ–Ω—Ç—Ä–∞ –≤ –∫–º.:')
    except Exception as e:
        loguru.logger.critical(f'–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ get_max_price: {str(e)}')


@bot.message_handler(state=MyStates.min_dist, is_digit=True)
def get_min_dist(message: Message):
    try:
        min_dist = message.text
        bot.send_message(message.chat.id, f'–í—ã –≤–≤–µ–ª–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ü–µ–Ω—Ç—Ä–∞ –≤ –∫–º.: {min_dist}')

        with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
            data['min_dist'] = min_dist

        bot.set_state(message.from_user.id, MyStates.max_dist, message.chat.id)
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ü–µ–Ω—Ç—Ä–∞ –≤ –∫–º.:')
    except Exception as e:
        loguru.logger.critical(f'–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ get_min_dist: {str(e)}')

@bot.message_handler(state=MyStates.max_dist, is_digit=True)
def get_max_dist(message: Message):
    try:
        max_dist = message.text
        bot.send_message(message.chat.id, f'–í—ã –≤–≤–µ–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ü–µ–Ω—Ç—Ä–∞ –≤ –∫–º.: {max_dist}')

        with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
            data['max_dist'] = max_dist

            msg = f'–ì–æ—Ä–æ–¥ - {data.get("city")}\n' \
                  f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–µ–ª–µ–π - {data.get("city_count")}\n' \
                  f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ - {data.get("photo")}\n' \
                  f'–î–∞—Ç–∞ –∑–∞–µ–∑–¥–∞ - {data.get("date_in").get("day")}.{data.get("date_in").get("month")}.{data.get("date_in").get("year")}\n' \
                  f'–î–∞—Ç–∞ –≤—ã–µ–∑–¥–∞ - {data.get("date_out").get("day")}.{data.get("date_out").get("month")}.{data.get("date_out").get("year")}'

        bot.send_message(message.chat.id, f'–ò–¥—ë—Ç –ø–æ–∏—Å–∫:\n{msg}')
        get_result_bestdeal(message)
    except Exception as e:
        loguru.logger.critical(f'–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ get_max_dist: {str(e)}')


def get_result_bestdeal(message: Message):
    """
    –í—ã–∑—ã–≤–∞–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –æ—Ç–µ–ª–µ–π —Å –ª—É—á—à–µ–π —Ü–µ–Ω–æ–π –∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ–º –¥–æ —Ü–µ–Ω—Ç—Ä–∞
    –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥—É–ª–∏ location - –¥–ª—è –ø–æ–∏—Å–∫–∞ id –æ—Ç–µ–ª—è
    list_bestdeal - –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–ø–∏—Å–∫–∞ –æ—Ç–µ–ª–µ–π (–∏–º—è, —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è, —Ü–µ–Ω–∞)
    hotel - –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–æ—Ç–æ, –∞–¥—Ä–µ—Å–∞
    """
    try:
        with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
            location_id = get_location_id(city=data['city'])
            list_hotels = get_list_hotels_bestdeal(id_city=str(location_id), city_count=int(data['city_count']),
                                                   min_price=int(data['min_price']), max_price=int(data['max_price']),
                                                   min_dist=int(data['min_dist']), max_dist=int(data['max_dist']),
                                                   check_in_date=data['date_in'], check_out_date=data['date_out'])

        bot.send_message(message.chat.id, '–û—Ç–µ–ª–∏ –Ω–∞–π–¥–µ–Ω—ã')

        hotels_data = []
        for hotel in list_hotels:
            hotels_info = get_hotel_info(str(hotel['id']), int(data['photo']))

            text_message = f'–ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ç–µ–ª—è: {hotel["name"]}\n' \
                           f'–ê–¥—Ä–µ—Å –æ—Ç–µ–ª—è: {hotels_info[0]["address"]}\n' \
                           f'–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ü–µ–Ω—Ç—Ä–∞: {hotel["distance"]}\n' \
                           f'–¶–µ–Ω–∞ –∑–∞ –Ω–æ—á—å: {round(hotel["price_per_day"], 2)} $\n' \
                           f'–¶–µ–Ω–∞ –∑–∞: {data["days"]} –¥–Ω—è(–µ–π): {round(hotel["price_per_day"] * data["days"])} $'

            photos = []
            if 'photos' in hotels_info[0]:
                for photo_url in hotels_info[0]["photos"]:
                    photos.append(photo_url)

            hotel_data = {
                'name': hotel['name'],
                'address': hotels_info[0]['address'],
                'distance': hotel['distance'],
                'price_per_day': round(hotel['price_per_day'], 2),
                'total_price': round(hotel['price_per_day'] * data['days']),
                'photos': photos
            }
            hotels_data.append(hotel_data)

            if 'photos' in hotels_info[0]:
                media_group = []
                for num, photo_url in enumerate(hotels_info[0]["photos"]):
                    media_group.append(InputMediaPhoto(media=photo_url, caption=text_message if num == 0 else None))
                bot.send_media_group(chat_id=message.chat.id, media=media_group)
            else:
                bot.send_message(chat_id=message.chat.id, text=text_message)

        bot.send_message(chat_id=message.chat.id, text='–ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à—ë–Ω')
        bot.delete_state(user_id=message.from_user.id, chat_id=message.chat.id)

        hotels_json = json.dumps(hotels_data)
        history = History.create(
            user_id=message.from_user.id,
            username=data['username'],
            command='get_result_bestdeal',
            city=data['city'],
            city_count=int(data['city_count']),
            photo=int(data['photo']),
            date_in=data['date_in'],
            date_out=data['date_out'],
            min_price=int(data['min_price']),
            max_price=int(data['max_price']),
            min_dist=int(data['min_dist']),
            max_dist=int(data['max_dist']),
            hotels=hotels_json
        )
        history.save()
    except Exception as e:
        loguru.logger.critical(f'–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ get_result_bestdeal: {str(e)}')


def get_result_lowprice(message: Message):
    """
    –í—ã–∑—ã–≤–∞–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –æ—Ç–µ–ª–µ–π —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω–æ–π.
    –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥—É–ª–∏ location - –¥–ª—è –ø–æ–∏—Å–∫–∞ id –æ—Ç–µ–ª—è
    list - –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–ø–∏—Å–∫–∞ –æ—Ç–µ–ª–µ–π (–∏–º—è, —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è, —Ü–µ–Ω–∞)
    hotel - –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–æ—Ç–æ, –∞–¥—Ä–µ—Å–∞
    """
    try:
        with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
            location_id = get_location_id(city=data['city'])
            list_hotels = get_list_hotels_lowprice(id_city=str(location_id), city_count=int(data['city_count']),
                                                   check_in_date=data['date_in'], check_out_date=data['date_out'])

        bot.send_message(message.chat.id, '–û—Ç–µ–ª–∏ –Ω–∞–π–¥–µ–Ω—ã')
        hotels_data = []
        for hotel in list_hotels:
            hotels_info = get_hotel_info(str(hotel['id']), int(data['photo']))

            text_message = f'–ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ç–µ–ª—è: {hotel["name"]}\n' \
                           f'–ê–¥—Ä–µ—Å –æ—Ç–µ–ª—è: {hotels_info[0]["address"]}\n' \
                           f'–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ü–µ–Ω—Ç—Ä–∞: {hotel["distance"]}\n' \
                           f'–¶–µ–Ω–∞ –∑–∞ –Ω–æ—á—å: {round(hotel["price_per_day"], 2)} $\n' \
                           f'–¶–µ–Ω–∞ –∑–∞: {data["days"]} –¥–Ω—è(–µ–π): {round(hotel["price_per_day"] * data["days"])} $'

            photos = []
            if 'photos' in hotels_info[0]:
                for photo_url in hotels_info[0]["photos"]:
                    photos.append(photo_url)

            hotel_data = {
                'name': hotel['name'],
                'address': hotels_info[0]['address'],
                'distance': hotel['distance'],
                'price_per_day': round(hotel['price_per_day'], 2),
                'total_price': round(hotel['price_per_day'] * data['days']),
                'photos': photos
            }
            hotels_data.append(hotel_data)

            if 'photos' in hotels_info[0]:
                media_group = []
                for num, photo_url in enumerate(hotels_info[0]["photos"]):
                    media_group.append(InputMediaPhoto(media=photo_url, caption=text_message if num == 0 else None))
                bot.send_media_group(chat_id=message.chat.id, media=media_group)
            else:
                bot.send_message(chat_id=message.chat.id, text=text_message)

        bot.send_message(chat_id=message.chat.id, text='–ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à—ë–Ω')
        bot.delete_state(user_id=message.from_user.id, chat_id=message.chat.id)

        hotels_json = json.dumps(hotels_data)
        history = History.create(
            user_id=message.from_user.id,
            username=data['username'],
            command='get_result_bestdeal',
            city=data['city'],
            city_count=int(data['city_count']),
            photo=int(data['photo']),
            date_in=data['date_in'],
            date_out=data['date_out'],
            hotels=hotels_json
        )
        history.save()
    except Exception as e:
        loguru.logger.critical(f'–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ get_result_lowprice: {str(e)}')


def get_result_highprice(message: Message):
    """
    –í—ã–∑—ã–≤–∞–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –æ—Ç–µ–ª–µ–π —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω–æ–π.
    –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥—É–ª–∏ location - –¥–ª—è –ø–æ–∏—Å–∫–∞ id –æ—Ç–µ–ª—è
    list_highprice - –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–ø–∏—Å–∫–∞ –æ—Ç–µ–ª–µ–π (–∏–º—è, —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è, —Ü–µ–Ω–∞)
    hotel - –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–æ—Ç–æ, –∞–¥—Ä–µ—Å–∞
    """
    try:
        with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
            location_id = get_location_id(city=data['city'])
            list_hotels = get_list_hotels_highprice(id_city=str(location_id), check_in_date=data['date_in'],
                                                    check_out_date=data['date_out'])
            city_count = int(data['city_count'])

        bot.send_message(message.chat.id, '–û—Ç–µ–ª–∏ –Ω–∞–π–¥–µ–Ω—ã')

        hotels_data = []
        for hotel in list_hotels[::-1][:city_count]:
            hotels_info = get_hotel_info(str(hotel['id']), int(data['photo']))

            text_message = f'–ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ç–µ–ª—è: {hotel["name"]}\n' \
                           f'–ê–¥—Ä–µ—Å –æ—Ç–µ–ª—è: {hotels_info[0]["address"]}\n' \
                           f'–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ü–µ–Ω—Ç—Ä–∞: {hotel["distance"]} –∫–º.\n' \
                           f'–¶–µ–Ω–∞ –∑–∞ –Ω–æ—á—å: {round(hotel["price_per_day"], 2)} $\n' \
                           f'–¶–µ–Ω–∞ –∑–∞: {data["days"]} –¥–Ω—è(–µ–π): {round(hotel["price_per_day"] * data["days"])} $'

            photos = []
            if 'photos' in hotels_info[0]:
                for photo_url in hotels_info[0]["photos"]:
                    photos.append(photo_url)

            hotel_data = {
                'name': hotel['name'],
                'address': hotels_info[0]['address'],
                'distance': hotel['distance'],
                'price_per_day': round(hotel['price_per_day'], 2),
                'total_price': round(hotel['price_per_day'] * data['days']),
                'photos': photos
            }
            hotels_data.append(hotel_data)

            if 'photos' in hotels_info[0]:
                media_group = []
                for num, photo_url in enumerate(hotels_info[0]["photos"]):
                    media_group.append(InputMediaPhoto(media=photo_url, caption=text_message if num == 0 else None))
                bot.send_media_group(chat_id=message.chat.id, media=media_group)
            else:
                bot.send_message(chat_id=message.chat.id, text=text_message)

        bot.send_message(chat_id=message.chat.id, text='–ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à—ë–Ω')
        bot.delete_state(user_id=message.from_user.id, chat_id=message.chat.id)

        hotels_json = json.dumps(hotels_data)
        history = History.create(
            user_id=message.from_user.id,
            username=data['username'],
            command='get_result_bestdeal',
            city=data['city'],
            city_count=int(data['city_count']),
            photo=int(data['photo']),
            date_in=data['date_in'],
            date_out=data['date_out'],
            hotels=hotels_json
        )
        history.save()
    except Exception as e:
        loguru.logger.critical(f'–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ get_result_highprice: {str(e)}')


bot.add_custom_filter(custom_filters.StateFilter(bot))
bot.add_custom_filter(custom_filters.IsDigitFilter())
bot.infinity_polling(skip_pending=True)
